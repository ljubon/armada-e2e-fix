name: CI

env:
  GO111MODULE: "on"
  GOPATH: "/home/runner/work/armada/armada/go"
  GOCACHE: "/home/runner/.cache/go-build"

on: [push]

defaults:
  run:
    shell: bash

# TODO - list
# 1. Change hub.docker.com account (repository)
# 2. Update SSH credentials (use old ones from config.yml)
# 3. Is this complient to use? https://github.com/marketplace/actions/create-release
# 4. 

jobs:
  # code_styles:
  #   name: Code style
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Install Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: '1.16'
  #     - name: Checkout code into the Go module directory
  #       uses: actions/checkout@v2
  #       with:
  #         path: ${{ env.GOPATH }}/src/github.com/G-Research/armada
          
  #     - name: Run ineffassign
  #       run: |
  #         cd /tmp
  #         go install github.com/gordonklaus/ineffassign@latest
  #         cd ${{ env.GOPATH }}/src/github.com/G-Research/armada
  #         echo "Run ineffassign..."
  #         ineffassign ./...

  #     - name: Check formatting
  #       run: |
  #         go install golang.org/x/tools/cmd/goimports@v0.1.1
  #         if [ $(goimports -l -local "github.com/G-Research/armada" | wc -l) -eq 0 ]; then exit 0; else exit 1; fi

  #     - name: Check generated files
  #       run: |
  #         make proto
  #         git status -s -uno
  #         git --no-pager diff
  #       working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

  # test:
  #   name: Test
  #   runs-on: ubuntu-20.04
  #   needs: [code_styles]
  #   steps:
  #     - name: Install Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: '1.16'
  #     - name: Checkout code into the Go module directory
  #       uses: actions/checkout@v2
  #       with:
  #         path: ${{ env.GOPATH }}/src/github.com/G-Research/armada

  #     - uses: actions/cache@v2
  #       with:
  #         path: |
  #           ~/go/pkg/mod
  #           ~/.cache/go-build
  #           /home/runner/.cache/go-build
  #           ~/Library/Caches/go-build
  #           %LocalAppData%\go-build
  #         key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
  #         restore-keys: |
  #           ${{ runner.os }}-go-

  #     - name: Run tests
  #       run: |
  #         make tests
  #       working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

  #     - name: Check go.sum
  #       run: |
  #         cat go.sum
  #       working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada


  build:
    name: Build
    # needs: [test,code_styles] 
    runs-on: ubuntu-20.04
    env:
      dockerToken: ${{ secrets.DOCKERTOKEN }}
      dockerUsername: ${{ secrets.DOCKERUSERNAME }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      - name: Checkout code into the Go module directory
        uses: actions/checkout@v2
        with:
          path: ${{ env.GOPATH }}/src/github.com/G-Research/armada
      
      - name: Setup environment
        run: |
          ./e2e/setup/setup_environment.sh
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Start cluster for e2e tests
        run: |
          ./e2e/setup/setup_cluster_ci.sh
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Build & Run e2e tests #TODO Tests not working check Johnathan's
        run: | 
          make build-ci tests-e2e 
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - name: Check go.sum
        run: |
          cat go.sum
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada

      - uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            /home/runner/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: armadactl
          path: |
            bin/armadactl

      - name: Push Image #TODO
        run: |
          echo $dockerUsername
          echo "Test "${dockerUsername}" "

          if [ -z "${dockerUsername}" ]
            then
              echo "Do not push image inside fork."
              exit 0
          fi

          TAG=${GITHUB_SHA}
          BRANCH=${GITHUB_REF##*/}

          if [ ${BRANCH} != master ]
            then
              TAG=branch-$(echo -n ${BRANCH} | sed 's|/|-|g')-${GITHUB_SHA}
          fi


          echo ${dockerToken} | docker login -u ${dockerUsername} --password-stdin

          docker tag armada ljubon/armada-server-dev:${TAG}
          docker push ljubon/armada-server-dev:${TAG}

          docker tag armada-executor ljubon/armada-executor-dev:${TAG}
          docker push ljubon/armada-executor-dev:${TAG}

          docker tag armadactl ljubon/armada-armadactl-dev:${TAG}
          docker push ljubon/armada-armadactl-dev:${TAG}

          docker tag armada-load-tester ljubon/armada-load-tester-dev:${TAG}
          docker push ljubon/armada-load-tester-dev:${TAG}

          docker tag armada-fakeexecutor ljubon/armada-fakeexecutor-dev:${TAG}
          docker push ljubon/armada-fakeexecutor-dev:${TAG}

          docker tag armada-lookout ljubon/armada-lookout-dev:${TAG}
          docker push ljubon/armada-lookout-dev:${TAG}
        working-directory: ${{ env.GOPATH }}/src/github.com/G-Research/armada


  # release:
  #   name: Release
  #   needs: [build]
  #   runs-on: ubuntu-20.04
  #   container:
  #     image: cimg/go:1.16.2
  #   steps:
  #     - name: Debug
  #       run: |
  #         ls -larth
  #         ls -larth $GOPATH/src/github.com/G-Research/armada/

  #     - name: Build armadactl release artifacts
  #       run: |
  #         cd $GOPATH/src/github.com/G-Research/armada/
  #         TAG=${GITHUB_REF##*/}
  #         make build-armadactl-release RELEASE_VERSION=${TAG}

  #     - name: Archive production artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: dist
  #         path: |
  #           dist/*

  #     - name: Upload artifacts to Github release #TODO
  #       uses: ncipollo/release-action@v1.8.6
  #       with:
  #         artifacts: "./dist/*"
  #         token: ${{ secrets.RELEASE_TOKEN }}
  #         tag: ${GITHUB_REF##*/}
  #         commit: ${GITHUB_REF##*/}

  #     - name: Set .ssh directory and GIT_SSH_COMMAND
  #       run: |
  #         echo 'SSH_CONFIG_DIR="/home/runner/.ssh"' >> $BASH_ENV
  #         echo 'GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=$SSH_CONFIG_DIR/known_hosts"' >> $BASH_ENV
  #         source $BASH_ENV

  #     - name: Create known_hosts file for github.com #TODO
  #       run: |
  #         mkdir -p $SSH_CONFIG_DIR
  #         echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQClI5HsKxVRM7smlKAcW3Zod+qe5I1kPfFynFia1mVw2N2qogxNLVLXD/BIUuHrB9Si7SxBj7rRdZgVuQoj6zexo/VyBIyJbWE4q218FaVDbmZ/Wa9ewZvwJCXa8VXPk8FWaHbZAtXlnL1/qD8InAFtmS9CES+xSLWfOtczxWF3oMDi9uxSjlhutr2gjsvaDxIwuR+yDnJp9lDT7q5wCcML6Tk9niOoYNtRgrN1ovfqvLXZUm5vYld7IX9q3i2VgQ5776cPELX20gpQu1wsjhWRSvig3lAhl2qMxkAN2d1ATDacD2ewsNGUg+VV0ThY3loeEwcPMErgjNv3eI6UPupfW1qzPyBHMw4XY4TIQkYSwa5TR8NLdNM1DGkdotaYTbb/6nHHOC2DlpntDzImPBWpvQSy5Vl9zx0hRYWz6Q772g5agzwjMh76ry5lLsXpg0bp2dhPAOVXsUqOYrB5x4vdU/HiX3x/b30dGxPOnNm40YIRTW281W3iMMWg+TlgRWs= ljuboops@djoko' >> $SSH_CONFIG_DIR/known_hosts

  #     - name: Clone the G-Research common charts repo
  #       run: |
  #         cd $GOPATH/src/github.com/G-Research/armada/

  #         eval "$(ssh-agent -s)"
  #         echo -e "$ARMADA_CHART_UPDATE_KEY" | ssh-add - > /dev/null
  #         git clone -q git@github.com:G-Research/charts.git

  #     - name: Check the the Helm v3 client
  #       run: |
  #         cd $GOPATH/src/github.com/G-Research/armada/
  #         echo "Helm version:" $(helm version --short)

  #     - name: Update version, appVersion and image tag to match current $RELEASE_TAG
  #       run: |
  #         cd $GOPATH/src/github.com/G-Research/armada/
  #         RELEASE_TAG=${GITHUB_REF##*/}
  #         echo release version is $RELEASE_TAG
  #         find . \( -name "Chart.yaml" -o -name "values.yaml" \) -exec sed -i s/LATEST/$RELEASE_TAG/ {} +

  #     - name: Build new packages and index.yaml
  #       run: |
  #         cd $GOPATH/src/github.com/G-Research/armada/
  #         helm package deployment/armada/ -d charts/armada/
  #         helm package deployment/executor -d charts/armada/
  #         helm package deployment/executor-cluster-monitoring/ -d charts/armada/
  #         helm package deployment/lookout/ -d charts/armada/
  #         helm package deployment/lookout-migration/ -d charts/armada/
  #         helm repo index charts/

  #     - name: Update version, appVersion and image tag to match current $RELEASE_TAG
  #       run: |
  #         cd $GOPATH/src/github.com/G-Research/armada/
  #         RELEASE_TAG=${CIRCLE_TAG}
  #         cd charts
  #         git checkout -b circlci-armada_$RELEASE_TAG
  #         git add ./armada
  #         git -c user.name='GR OSS' -c user.email=github@gr-oss.io commit -qam "Pushing new helm charts at version $RELEASE_TAG"
  #         eval "$(ssh-agent -s)"
  #         echo -e "$ARMADA_CHART_UPDATE_KEY" | ssh-add - > /dev/null
  #         git push -q origin HEAD

  #     - name: Archive production artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: dist
  #         path: |
  #           bin/client/DotNet/*

  # release-dotnet-client:
  #   name: Release DotNet client
  #   needs: [build]
  #   runs-on: ubuntu-20.04
  #   container:
  #     image: mcr.microsoft.com/dotnet/core/sdk:3.0.101-alpine3.10
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Install Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: '1.16'
  #     - name: Set repo
  #       run: |
  #         mkdir -p $GOPATH/src/github.com/G-Research/armada
  #         cp -ar $GITHUB_WORKSPACE $GOPATH/src/github.com/G-Research/
  #         ls -larth $GOPATH/src/github.com/G-Research/armada/.

  #     - name: Release dotnet client
  #       run: |
  #         cd $GOPATH/src/github.com/G-Research/armada/
  #         RELEASE_TAG=${CIRCLE_TAG#"v"}
  #         dotnet pack client/DotNet/Armada.Client/Armada.Client.csproj -c Release -p:PackageVersion=${RELEASE_TAG} -o ./bin/client/DotNet
  #         dotnet nuget push ./bin/client/DotNet/G-Research.Armada.Client.${RELEASE_TAG}.nupkg -k ${NUGET_API_KEY} -s https://api.nuget.org/v3/index.json

  # release-dotnet-client:
  #   docker:
  #     - image: mcr.microsoft.com/dotnet/core/sdk:3.0.101-alpine3.10
  #   working_directory: /go/src/github.com/G-Research/armada
  #   steps:
  #     - checkout

  #     - run:
  #         name: Release dotnet client
  #         command: |
  #           RELEASE_TAG=${CIRCLE_TAG#"v"}
  #           dotnet pack client/DotNet/Armada.Client/Armada.Client.csproj -c Release -p:PackageVersion=${RELEASE_TAG} -o ./bin/client/DotNet
  #           dotnet nuget push ./bin/client/DotNet/G-Research.Armada.Client.${RELEASE_TAG}.nupkg -k ${NUGET_API_KEY} -s https://api.nuget.org/v3/index.json

  #     - store_artifacts:
  #         path: bin/client/DotNet/*
